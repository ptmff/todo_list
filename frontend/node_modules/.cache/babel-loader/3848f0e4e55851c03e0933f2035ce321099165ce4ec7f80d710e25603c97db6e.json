{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from './todoSlice';\nimport apiMiddleware from './apiMiddleware';\n\n// Функции для загрузки/сохранения состояния в Local Storage\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('todos');\n    if (!serializedState) return undefined;\n    return {\n      todos: {\n        items: JSON.parse(serializedState)\n      }\n    };\n  } catch (err) {\n    return undefined;\n  }\n};\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state.todos.items);\n    localStorage.setItem('todos', serializedState);\n  } catch (err) {\n    // игнорируем ошибки записи\n  }\n};\nconst preloadedState = loadState();\nconst store = configureStore({\n  reducer: {\n    todos: todoReducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(apiMiddleware),\n  preloadedState\n});\n\n// Сохранение состояния при каждом изменении\nstore.subscribe(() => {\n  saveState(store.getState());\n});\nexport default store;","map":{"version":3,"names":["configureStore","todoReducer","apiMiddleware","loadState","serializedState","localStorage","getItem","undefined","todos","items","JSON","parse","err","saveState","state","stringify","setItem","preloadedState","store","reducer","middleware","getDefaultMiddleware","concat","subscribe","getState"],"sources":["/Users/ptmff/Documents/Проекты/TODO_List/todo_list/frontend/src/store/index.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from './todoSlice';\nimport apiMiddleware from './apiMiddleware';\n\n// Функции для загрузки/сохранения состояния в Local Storage\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('todos');\n    if (!serializedState) return undefined;\n    return { todos: { items: JSON.parse(serializedState) } };\n  } catch (err) {\n    return undefined;\n  }\n};\n\nconst saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state.todos.items);\n    localStorage.setItem('todos', serializedState);\n  } catch (err) {\n    // игнорируем ошибки записи\n  }\n};\n\nconst preloadedState = loadState();\n\nconst store = configureStore({\n  reducer: {\n    todos: todoReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(apiMiddleware),\n  preloadedState,\n});\n\n// Сохранение состояния при каждом изменении\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nexport default store;\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,WAAW,MAAM,aAAa;AACrC,OAAOC,aAAa,MAAM,iBAAiB;;AAE3C;AACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB,IAAI;IACF,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACrD,IAAI,CAACF,eAAe,EAAE,OAAOG,SAAS;IACtC,OAAO;MAAEC,KAAK,EAAE;QAAEC,KAAK,EAAEC,IAAI,CAACC,KAAK,CAACP,eAAe;MAAE;IAAE,CAAC;EAC1D,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACZ,OAAOL,SAAS;EAClB;AACF,CAAC;AAED,MAAMM,SAAS,GAAIC,KAAK,IAAK;EAC3B,IAAI;IACF,MAAMV,eAAe,GAAGM,IAAI,CAACK,SAAS,CAACD,KAAK,CAACN,KAAK,CAACC,KAAK,CAAC;IACzDJ,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEZ,eAAe,CAAC;EAChD,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACZ;EAAA;AAEJ,CAAC;AAED,MAAMK,cAAc,GAAGd,SAAS,CAAC,CAAC;AAElC,MAAMe,KAAK,GAAGlB,cAAc,CAAC;EAC3BmB,OAAO,EAAE;IACPX,KAAK,EAAEP;EACT,CAAC;EACDmB,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC,CAAC,CAACC,MAAM,CAACpB,aAAa,CAAC;EAC9Ce;AACF,CAAC,CAAC;;AAEF;AACAC,KAAK,CAACK,SAAS,CAAC,MAAM;EACpBV,SAAS,CAACK,KAAK,CAACM,QAAQ,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC;AAEF,eAAeN,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}